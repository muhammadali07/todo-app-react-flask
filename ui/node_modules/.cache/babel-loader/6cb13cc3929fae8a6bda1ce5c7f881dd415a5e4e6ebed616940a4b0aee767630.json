{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5001/api';\nclass TodoAPI {\n  async getAllTodos() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch todos');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching todos:', error);\n      throw error;\n    }\n  }\n  async createTodo(todoData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(todoData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create todo');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error creating todo:', error);\n      throw error;\n    }\n  }\n  async updateTodo(todoId, todoData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos/${todoId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(todoData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update todo');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating todo:', error);\n      throw error;\n    }\n  }\n  async deleteTodo(todoId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos/${todoId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete todo');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error deleting todo:', error);\n      throw error;\n    }\n  }\n}\nexport default new TodoAPI();","map":{"version":3,"names":["API_BASE_URL","TodoAPI","getAllTodos","response","fetch","ok","Error","json","error","console","createTodo","todoData","method","headers","body","JSON","stringify","updateTodo","todoId","deleteTodo"],"sources":["/Users/mab/Documents/office/codinginid/codingFirst/ui/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5001/api';\n\nclass TodoAPI {\n  async getAllTodos() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch todos');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching todos:', error);\n      throw error;\n    }\n  }\n\n  async createTodo(todoData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(todoData),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create todo');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error creating todo:', error);\n      throw error;\n    }\n  }\n\n  async updateTodo(todoId, todoData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos/${todoId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(todoData),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update todo');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating todo:', error);\n      throw error;\n    }\n  }\n\n  async deleteTodo(todoId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos/${todoId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete todo');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error deleting todo:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new TodoAPI();"],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,OAAO,CAAC;EACZ,MAAMC,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,QAAQ,CAAC;MACrD,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;EAEA,MAAME,UAAUA,CAACC,QAAQ,EAAE;IACzB,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,QAAQ,EAAE;QACpDY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;MAC/B,CAAC,CAAC;MACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;EAEA,MAAMS,UAAUA,CAACC,MAAM,EAAEP,QAAQ,EAAE;IACjC,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,UAAUkB,MAAM,EAAE,EAAE;QAC9DN,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;MAC/B,CAAC,CAAC;MACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;EAEA,MAAMW,UAAUA,CAACD,MAAM,EAAE;IACvB,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,UAAUkB,MAAM,EAAE,EAAE;QAC9DN,MAAM,EAAE;MACV,CAAC,CAAC;MACF,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;AACF;AAEA,eAAe,IAAIP,OAAO,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}