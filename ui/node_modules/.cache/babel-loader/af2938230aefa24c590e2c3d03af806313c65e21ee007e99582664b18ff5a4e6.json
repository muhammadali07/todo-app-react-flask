{"ast":null,"code":"// Base URL untuk API backend Flask\nconst API_BASE_URL = 'http://localhost:5001/api';\n\n/**\n * Class untuk mengelola semua API calls ke backend Flask\n * Menyediakan methods untuk CRUD operations pada todos\n */\nclass TodoAPI {\n  /**\n   * Mengambil semua todos dari backend\n   * @returns {Promise<Array>} Array berisi semua todos\n   */\n  async getAllTodos() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch todos');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching todos:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Membuat todo baru di backend\n   * @param {Object} todoData - Data todo yang akan dibuat\n   * @param {string} todoData.title - Judul todo\n   * @param {string} todoData.description - Deskripsi todo\n   * @param {boolean} todoData.completed - Status penyelesaian\n   * @returns {Promise<Object>} Todo yang baru dibuat\n   */\n  async createTodo(todoData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(todoData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create todo');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error creating todo:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Mengupdate todo yang sudah ada di backend\n   * @param {number} todoId - ID todo yang akan diupdate\n   * @param {Object} todoData - Data todo yang baru\n   * @returns {Promise<Object>} Todo yang sudah diupdate\n   */\n  async updateTodo(todoId, todoData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos/${todoId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(todoData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update todo');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating todo:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Menghapus todo dari backend\n   * @param {number} todoId - ID todo yang akan dihapus\n   * @returns {Promise<Object>} Response konfirmasi penghapusan\n   */\n  async deleteTodo(todoId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos/${todoId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete todo');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error deleting todo:', error);\n      throw error;\n    }\n  }\n}\n\n// Export instance dari TodoAPI class untuk digunakan di komponen lain\nexport default new TodoAPI();","map":{"version":3,"names":["API_BASE_URL","TodoAPI","getAllTodos","response","fetch","ok","Error","json","error","console","createTodo","todoData","method","headers","body","JSON","stringify","updateTodo","todoId","deleteTodo"],"sources":["/Users/mab/Documents/office/codinginid/codingFirst/ui/src/services/api.js"],"sourcesContent":["// Base URL untuk API backend Flask\nconst API_BASE_URL = 'http://localhost:5001/api';\n\n/**\n * Class untuk mengelola semua API calls ke backend Flask\n * Menyediakan methods untuk CRUD operations pada todos\n */\nclass TodoAPI {\n  /**\n   * Mengambil semua todos dari backend\n   * @returns {Promise<Array>} Array berisi semua todos\n   */\n  async getAllTodos() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch todos');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching todos:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Membuat todo baru di backend\n   * @param {Object} todoData - Data todo yang akan dibuat\n   * @param {string} todoData.title - Judul todo\n   * @param {string} todoData.description - Deskripsi todo\n   * @param {boolean} todoData.completed - Status penyelesaian\n   * @returns {Promise<Object>} Todo yang baru dibuat\n   */\n  async createTodo(todoData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(todoData),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create todo');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error creating todo:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Mengupdate todo yang sudah ada di backend\n   * @param {number} todoId - ID todo yang akan diupdate\n   * @param {Object} todoData - Data todo yang baru\n   * @returns {Promise<Object>} Todo yang sudah diupdate\n   */\n  async updateTodo(todoId, todoData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos/${todoId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(todoData),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update todo');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating todo:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Menghapus todo dari backend\n   * @param {number} todoId - ID todo yang akan dihapus\n   * @returns {Promise<Object>} Response konfirmasi penghapusan\n   */\n  async deleteTodo(todoId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/todos/${todoId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete todo');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error deleting todo:', error);\n      throw error;\n    }\n  }\n}\n\n// Export instance dari TodoAPI class untuk digunakan di komponen lain\nexport default new TodoAPI();"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,2BAA2B;;AAEhD;AACA;AACA;AACA;AACA,MAAMC,OAAO,CAAC;EACZ;AACF;AACA;AACA;EACE,MAAMC,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,QAAQ,CAAC;MACrD,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAME,UAAUA,CAACC,QAAQ,EAAE;IACzB,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,QAAQ,EAAE;QACpDY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;MAC/B,CAAC,CAAC;MACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMS,UAAUA,CAACC,MAAM,EAAEP,QAAQ,EAAE;IACjC,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,UAAUkB,MAAM,EAAE,EAAE;QAC9DN,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;MAC/B,CAAC,CAAC;MACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMW,UAAUA,CAACD,MAAM,EAAE;IACvB,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,UAAUkB,MAAM,EAAE,EAAE;QAC9DN,MAAM,EAAE;MACV,CAAC,CAAC;MACF,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;AACF;;AAEA;AACA,eAAe,IAAIP,OAAO,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}